// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma generate
// npx prisma db push
// npx prisma migrate reset

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  tasks         Task[]
  lists List[]
  labels Label[]
  subtasks   Subtask[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id         String   @id @default(cuid())
  userId     String
  listId     String?
  createdAt  DateTime @default(now())
  completedAt DateTime?
  order      Int
  name       String
  description String?
  dueDate    DateTime?
  duration   Int?
  priority   TaskPriority?
  isComplete  Boolean @default(false)
  labels Label[]
  // recurring  RecurringTask?
  subtasks   Subtask[]
  
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  list       List? @relation(fields: [listId], references: [id])
}

model List {
  id    String  @id @default(cuid())
  userId String
  name  String
  order  Int
  tasks Task[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Label {
  id    String  @id @default(cuid())
  userId String
  name  String
  color String?
  tasks Task[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subtask {
  id           String  @id @default(cuid())
  taskId       String
  userId       String
  order  Int
  name         String
  isComplete  Boolean @default(false)

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
